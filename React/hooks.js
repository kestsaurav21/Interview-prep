// ðŸ”¹ What are Hooks?
// Hooks are special functions introduced in React 16.8 that allow developers to use state and other React features (like state, lifecycle, and context) without writing class components.


// ðŸ”¹ Most Common React Hooks
// ðŸ”‘ Basic Hooks
// 1. useState â†’ Manage state in a functional component.
// 2. useEffect â†’ Handle side effects (fetching data, DOM manipulation, subscriptions).
// 3. useContext â†’ Access context values without writing <Context.Consumer>.
// 4. useRef â†’ Persist values across renders / access DOM elements.
// 5. useReducer â†’ Alternative to useState for complex state logic (like Redux-lite).
// 6. useCallback â†’ Memoizes a function so itâ€™s not re-created on every render.
// 7. useMemo â†’ Memoizes a computed value to avoid expensive recalculations.

// Rules for hooks:

//1. Only call Hooks at the top level 


function Counter() {
  // âœ… Good: top-level in a function component
  const [count, setCount] = useState(0);
  // ...
}

function useWindowWidth() {
  // âœ… Good: top-level in a custom Hook
  const [width, setWidth] = useState(window.innerWidth);
  // ...
}

//2. Only call Hooks from React functions 

function FriendList() {
  const [onlineStatus, setOnlineStatus] = useOnlineStatus(); // âœ…
}




